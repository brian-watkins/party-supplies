import { ConfigurableElement, SpecialElements, SpecialElementBuilder, View, Stateful } from "./view.js";
import { SpecialAttributes } from "./viewConfig.js";

export interface SVGBuilder<Context> extends SpecialElementBuilder<Context> {
    a(builder?: (element: ConfigurableElement<ASVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    altGlyph(builder?: (element: ConfigurableElement<AltGlyphSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    altGlyphDef(builder?: (element: ConfigurableElement<AltGlyphDefSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    altGlyphItem(builder?: (element: ConfigurableElement<AltGlyphItemSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    animate(builder?: (element: ConfigurableElement<AnimateSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    animateColor(builder?: (element: ConfigurableElement<AnimateColorSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    animateMotion(builder?: (element: ConfigurableElement<AnimateMotionSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    animateTransform(builder?: (element: ConfigurableElement<AnimateTransformSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    animation(builder?: (element: ConfigurableElement<AnimationSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    audio(builder?: (element: ConfigurableElement<AudioSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    canvas(builder?: (element: ConfigurableElement<CanvasSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    circle(builder?: (element: ConfigurableElement<CircleSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    clipPath(builder?: (element: ConfigurableElement<ClipPathSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    cursor(builder?: (element: ConfigurableElement<CursorSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    defs(builder?: (element: ConfigurableElement<DefsSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    desc(builder?: (element: ConfigurableElement<DescSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    discard(builder?: (element: ConfigurableElement<DiscardSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    ellipse(builder?: (element: ConfigurableElement<EllipseSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feBlend(builder?: (element: ConfigurableElement<FeBlendSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feColorMatrix(builder?: (element: ConfigurableElement<FeColorMatrixSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feComponentTransfer(builder?: (element: ConfigurableElement<FeComponentTransferSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feComposite(builder?: (element: ConfigurableElement<FeCompositeSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feConvolveMatrix(builder?: (element: ConfigurableElement<FeConvolveMatrixSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feDiffuseLighting(builder?: (element: ConfigurableElement<FeDiffuseLightingSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feDisplacementMap(builder?: (element: ConfigurableElement<FeDisplacementMapSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feDistantLight(builder?: (element: ConfigurableElement<FeDistantLightSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feDropShadow(builder?: (element: ConfigurableElement<FeDropShadowSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feFlood(builder?: (element: ConfigurableElement<FeFloodSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feFuncA(builder?: (element: ConfigurableElement<FeFuncASVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feFuncB(builder?: (element: ConfigurableElement<FeFuncBSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feFuncG(builder?: (element: ConfigurableElement<FeFuncGSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feFuncR(builder?: (element: ConfigurableElement<FeFuncRSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feGaussianBlur(builder?: (element: ConfigurableElement<FeGaussianBlurSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feImage(builder?: (element: ConfigurableElement<FeImageSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feMerge(builder?: (element: ConfigurableElement<FeMergeSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feMergeNode(builder?: (element: ConfigurableElement<FeMergeNodeSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feMorphology(builder?: (element: ConfigurableElement<FeMorphologySVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feOffset(builder?: (element: ConfigurableElement<FeOffsetSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    fePointLight(builder?: (element: ConfigurableElement<FePointLightSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feSpecularLighting(builder?: (element: ConfigurableElement<FeSpecularLightingSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feSpotLight(builder?: (element: ConfigurableElement<FeSpotLightSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feTile(builder?: (element: ConfigurableElement<FeTileSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    feTurbulence(builder?: (element: ConfigurableElement<FeTurbulenceSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    filter(builder?: (element: ConfigurableElement<FilterSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    foreignObject(builder?: (element: ConfigurableElement<ForeignObjectSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    g(builder?: (element: ConfigurableElement<GSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    glyph(builder?: (element: ConfigurableElement<GlyphSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    glyphRef(builder?: (element: ConfigurableElement<GlyphRefSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    handler(builder?: (element: ConfigurableElement<HandlerSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    hkern(builder?: (element: ConfigurableElement<HkernSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    iframe(builder?: (element: ConfigurableElement<IframeSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    image(builder?: (element: ConfigurableElement<ImageSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    line(builder?: (element: ConfigurableElement<LineSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    linearGradient(builder?: (element: ConfigurableElement<LinearGradientSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    listener(builder?: (element: ConfigurableElement<ListenerSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    marker(builder?: (element: ConfigurableElement<MarkerSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    mask(builder?: (element: ConfigurableElement<MaskSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    metadata(builder?: (element: ConfigurableElement<MetadataSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    mpath(builder?: (element: ConfigurableElement<MpathSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    path(builder?: (element: ConfigurableElement<PathSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    pattern(builder?: (element: ConfigurableElement<PatternSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    polygon(builder?: (element: ConfigurableElement<PolygonSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    polyline(builder?: (element: ConfigurableElement<PolylineSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    prefetch(builder?: (element: ConfigurableElement<PrefetchSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    radialGradient(builder?: (element: ConfigurableElement<RadialGradientSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    rect(builder?: (element: ConfigurableElement<RectSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    script(builder?: (element: ConfigurableElement<ScriptSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    set(builder?: (element: ConfigurableElement<SetSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    solidColor(builder?: (element: ConfigurableElement<SolidColorSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    stop(builder?: (element: ConfigurableElement<StopSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    style(builder?: (element: ConfigurableElement<StyleSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    svg(builder?: (element: ConfigurableElement<SvgElementAttributes<Context>, SVGElements, Context>) => void): View;
    switch(builder?: (element: ConfigurableElement<SwitchSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    symbol(builder?: (element: ConfigurableElement<SymbolSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    tbreak(builder?: (element: ConfigurableElement<TbreakSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    text(builder?: (element: ConfigurableElement<TextSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    textArea(builder?: (element: ConfigurableElement<TextAreaSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    textPath(builder?: (element: ConfigurableElement<TextPathSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    title(builder?: (element: ConfigurableElement<TitleSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    tref(builder?: (element: ConfigurableElement<TrefSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    tspan(builder?: (element: ConfigurableElement<TspanSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    unknown(builder?: (element: ConfigurableElement<UnknownSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    use(builder?: (element: ConfigurableElement<UseSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    video(builder?: (element: ConfigurableElement<VideoSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    view(builder?: (element: ConfigurableElement<ViewSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
    vkern(builder?: (element: ConfigurableElement<VkernSVGElementAttributes<Context>, SVGElements, Context>) => void): View;
}

export interface SVGElements<Context> extends SpecialElements<Context> {
    a(builder?: (element: ConfigurableElement<ASVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    altGlyph(builder?: (element: ConfigurableElement<AltGlyphSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    altGlyphDef(builder?: (element: ConfigurableElement<AltGlyphDefSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    altGlyphItem(builder?: (element: ConfigurableElement<AltGlyphItemSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    animate(builder?: (element: ConfigurableElement<AnimateSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    animateColor(builder?: (element: ConfigurableElement<AnimateColorSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    animateMotion(builder?: (element: ConfigurableElement<AnimateMotionSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    animateTransform(builder?: (element: ConfigurableElement<AnimateTransformSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    animation(builder?: (element: ConfigurableElement<AnimationSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    audio(builder?: (element: ConfigurableElement<AudioSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    canvas(builder?: (element: ConfigurableElement<CanvasSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    circle(builder?: (element: ConfigurableElement<CircleSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    clipPath(builder?: (element: ConfigurableElement<ClipPathSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    cursor(builder?: (element: ConfigurableElement<CursorSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    defs(builder?: (element: ConfigurableElement<DefsSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    desc(builder?: (element: ConfigurableElement<DescSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    discard(builder?: (element: ConfigurableElement<DiscardSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    ellipse(builder?: (element: ConfigurableElement<EllipseSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feBlend(builder?: (element: ConfigurableElement<FeBlendSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feColorMatrix(builder?: (element: ConfigurableElement<FeColorMatrixSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feComponentTransfer(builder?: (element: ConfigurableElement<FeComponentTransferSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feComposite(builder?: (element: ConfigurableElement<FeCompositeSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feConvolveMatrix(builder?: (element: ConfigurableElement<FeConvolveMatrixSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feDiffuseLighting(builder?: (element: ConfigurableElement<FeDiffuseLightingSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feDisplacementMap(builder?: (element: ConfigurableElement<FeDisplacementMapSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feDistantLight(builder?: (element: ConfigurableElement<FeDistantLightSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feDropShadow(builder?: (element: ConfigurableElement<FeDropShadowSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feFlood(builder?: (element: ConfigurableElement<FeFloodSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feFuncA(builder?: (element: ConfigurableElement<FeFuncASVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feFuncB(builder?: (element: ConfigurableElement<FeFuncBSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feFuncG(builder?: (element: ConfigurableElement<FeFuncGSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feFuncR(builder?: (element: ConfigurableElement<FeFuncRSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feGaussianBlur(builder?: (element: ConfigurableElement<FeGaussianBlurSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feImage(builder?: (element: ConfigurableElement<FeImageSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feMerge(builder?: (element: ConfigurableElement<FeMergeSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feMergeNode(builder?: (element: ConfigurableElement<FeMergeNodeSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feMorphology(builder?: (element: ConfigurableElement<FeMorphologySVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feOffset(builder?: (element: ConfigurableElement<FeOffsetSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    fePointLight(builder?: (element: ConfigurableElement<FePointLightSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feSpecularLighting(builder?: (element: ConfigurableElement<FeSpecularLightingSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feSpotLight(builder?: (element: ConfigurableElement<FeSpotLightSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feTile(builder?: (element: ConfigurableElement<FeTileSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    feTurbulence(builder?: (element: ConfigurableElement<FeTurbulenceSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    filter(builder?: (element: ConfigurableElement<FilterSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    foreignObject(builder?: (element: ConfigurableElement<ForeignObjectSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    g(builder?: (element: ConfigurableElement<GSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    glyph(builder?: (element: ConfigurableElement<GlyphSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    glyphRef(builder?: (element: ConfigurableElement<GlyphRefSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    handler(builder?: (element: ConfigurableElement<HandlerSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    hkern(builder?: (element: ConfigurableElement<HkernSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    iframe(builder?: (element: ConfigurableElement<IframeSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    image(builder?: (element: ConfigurableElement<ImageSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    line(builder?: (element: ConfigurableElement<LineSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    linearGradient(builder?: (element: ConfigurableElement<LinearGradientSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    listener(builder?: (element: ConfigurableElement<ListenerSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    marker(builder?: (element: ConfigurableElement<MarkerSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    mask(builder?: (element: ConfigurableElement<MaskSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    metadata(builder?: (element: ConfigurableElement<MetadataSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    mpath(builder?: (element: ConfigurableElement<MpathSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    path(builder?: (element: ConfigurableElement<PathSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    pattern(builder?: (element: ConfigurableElement<PatternSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    polygon(builder?: (element: ConfigurableElement<PolygonSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    polyline(builder?: (element: ConfigurableElement<PolylineSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    prefetch(builder?: (element: ConfigurableElement<PrefetchSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    radialGradient(builder?: (element: ConfigurableElement<RadialGradientSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    rect(builder?: (element: ConfigurableElement<RectSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    script(builder?: (element: ConfigurableElement<ScriptSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    set(builder?: (element: ConfigurableElement<SetSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    solidColor(builder?: (element: ConfigurableElement<SolidColorSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    stop(builder?: (element: ConfigurableElement<StopSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    style(builder?: (element: ConfigurableElement<StyleSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    svg(builder?: (element: ConfigurableElement<SvgElementAttributes<Context>, SVGElements, Context>) => void): this;
    switch(builder?: (element: ConfigurableElement<SwitchSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    symbol(builder?: (element: ConfigurableElement<SymbolSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    tbreak(builder?: (element: ConfigurableElement<TbreakSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    text(builder?: (element: ConfigurableElement<TextSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    textArea(builder?: (element: ConfigurableElement<TextAreaSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    textPath(builder?: (element: ConfigurableElement<TextPathSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    title(builder?: (element: ConfigurableElement<TitleSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    tref(builder?: (element: ConfigurableElement<TrefSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    tspan(builder?: (element: ConfigurableElement<TspanSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    unknown(builder?: (element: ConfigurableElement<UnknownSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    use(builder?: (element: ConfigurableElement<UseSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    video(builder?: (element: ConfigurableElement<VideoSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    view(builder?: (element: ConfigurableElement<ViewSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
    vkern(builder?: (element: ConfigurableElement<VkernSVGElementAttributes<Context>, SVGElements, Context>) => void): this;
}

export interface GlobalSVGAttributes<Context> {
    about(value: string | Stateful<string, Context>): this;
    class(value: string | Stateful<string, Context>): this;
    content(value: string | Stateful<string, Context>): this;
    datatype(value: string | Stateful<string, Context>): this;
    id(value: string | Stateful<string, Context>): this;
    lang(value: string | Stateful<string, Context>): this;
    property(value: string | Stateful<string, Context>): this;
    rel(value: string | Stateful<string, Context>): this;
    resource(value: string | Stateful<string, Context>): this;
    rev(value: string | Stateful<string, Context>): this;
    style(value: string | Stateful<string, Context>): this;
    tabindex(value: string | Stateful<string, Context>): this;
    typeof(value: string | Stateful<string, Context>): this;
}

export interface ASVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): ASVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): ASVGElementAttributes;
    clip(value: string | Stateful<string, Context>): ASVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): ASVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): ASVGElementAttributes;
    color(value: string | Stateful<string, Context>): ASVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): ASVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): ASVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): ASVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): ASVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): ASVGElementAttributes;
    direction(value: string | Stateful<string, Context>): ASVGElementAttributes;
    display(value: string | Stateful<string, Context>): ASVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): ASVGElementAttributes;
    download(value: string | Stateful<string, Context>): ASVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): ASVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): ASVGElementAttributes;
    fill(value: string | Stateful<string, Context>): ASVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): ASVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): ASVGElementAttributes;
    filter(value: string | Stateful<string, Context>): ASVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): ASVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): ASVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): ASVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): ASVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): ASVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): ASVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): ASVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): ASVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): ASVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): ASVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): ASVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): ASVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): ASVGElementAttributes;
    href(value: string | Stateful<string, Context>): ASVGElementAttributes;
    hreflang(value: string | Stateful<string, Context>): ASVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): ASVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): ASVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): ASVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): ASVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): ASVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): ASVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): ASVGElementAttributes;
    mask(value: string | Stateful<string, Context>): ASVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): ASVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): ASVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): ASVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): ASVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): ASVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): ASVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): ASVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): ASVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): ASVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): ASVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): ASVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): ASVGElementAttributes;
    ping(value: string | Stateful<string, Context>): ASVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): ASVGElementAttributes;
    referrerpolicy(value: string | Stateful<string, Context>): ASVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): ASVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): ASVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): ASVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): ASVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): ASVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): ASVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): ASVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): ASVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): ASVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): ASVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): ASVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): ASVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): ASVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): ASVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): ASVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): ASVGElementAttributes;
    target(value: string | Stateful<string, Context>): ASVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): ASVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): ASVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): ASVGElementAttributes;
    transform(value: string | Stateful<string, Context>): ASVGElementAttributes;
    type(value: string | Stateful<string, Context>): ASVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): ASVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): ASVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): ASVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): ASVGElementAttributes;
}

export interface AltGlyphSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    color(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    display(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    dx(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    dy(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    format(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    glyphRef(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    rotate(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    x(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
    y(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes;
}

export interface AltGlyphDefSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
}

export interface AltGlyphItemSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
}

export interface AnimateSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    accumulate(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    additive(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    alignmentBaseline(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    attributeName(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    attributeType(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    begin(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    by(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    calcMode(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    color(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    display(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    dur(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    end(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    from(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    href(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    keySplines(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    keyTimes(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    max(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    min(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    repeatCount(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    repeatDur(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    restart(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    to(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    values(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): AnimateSVGElementAttributes;
}

export interface AnimateColorSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    accumulate(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    additive(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    alignmentBaseline(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    attributeName(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    attributeType(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    begin(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    by(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    calcMode(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    color(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    display(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    dur(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    end(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    from(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    keySplines(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    keyTimes(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    max(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    min(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    repeatCount(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    repeatDur(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    restart(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    to(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    values(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes;
}

export interface AnimateMotionSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    accumulate(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    additive(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    begin(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    by(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    calcMode(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    dur(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    end(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    from(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    href(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    keyPoints(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    keySplines(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    keyTimes(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    max(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    min(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    origin(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    path(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    repeatCount(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    repeatDur(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    restart(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    rotate(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    to(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
    values(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes;
}

export interface AnimateTransformSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    accumulate(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    additive(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    attributeName(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    attributeType(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    begin(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    by(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    calcMode(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    dur(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    end(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    from(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    href(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    keySplines(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    keyTimes(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    max(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    min(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    repeatCount(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    repeatDur(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    restart(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    to(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    type(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
    values(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes;
}

export interface AnimationSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    begin(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    dur(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    end(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    height(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    initialVisibility(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    max(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    min(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    preserveAspectRatio(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    repeatCount(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    repeatDur(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    restart(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    syncBehavior(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    syncMaster(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    syncTolerance(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    width(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    x(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
    y(value: string | Stateful<string, Context>): AnimationSVGElementAttributes;
}

export interface AudioSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    begin(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    dur(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    end(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    max(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    min(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    repeatCount(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    repeatDur(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    restart(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    syncBehavior(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    syncMaster(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    syncTolerance(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
    type(value: string | Stateful<string, Context>): AudioSVGElementAttributes;
}

export interface CanvasSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    preserveAspectRatio(value: string | Stateful<string, Context>): CanvasSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): CanvasSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): CanvasSVGElementAttributes;
}

export interface CircleSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    color(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    cx(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    cy(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    display(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    pathLength(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    r(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): CircleSVGElementAttributes;
}

export interface ClipPathSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    clipPathUnits(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    color(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    display(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes;
}

export interface CursorSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    externalResourcesRequired(value: string | Stateful<string, Context>): CursorSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): CursorSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): CursorSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): CursorSVGElementAttributes;
    x(value: string | Stateful<string, Context>): CursorSVGElementAttributes;
    y(value: string | Stateful<string, Context>): CursorSVGElementAttributes;
}

export interface DefsSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    color(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    display(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): DefsSVGElementAttributes;
}

export interface DescSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    requiredExtensions(value: string | Stateful<string, Context>): DescSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): DescSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): DescSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): DescSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): DescSVGElementAttributes;
}

export interface DiscardSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    begin(value: string | Stateful<string, Context>): DiscardSVGElementAttributes;
    href(value: string | Stateful<string, Context>): DiscardSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): DiscardSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): DiscardSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): DiscardSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): DiscardSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): DiscardSVGElementAttributes;
}

export interface EllipseSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    color(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    cx(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    cy(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    display(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    pathLength(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    rx(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    ry(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): EllipseSVGElementAttributes;
}

export interface FeBlendSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    in2(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    mode(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes;
}

export interface FeColorMatrixSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    type(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    values(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes;
}

export interface FeComponentTransferSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes;
}

export interface FeCompositeSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    in2(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    k1(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    k2(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    k3(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    k4(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    operator(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes;
}

export interface FeConvolveMatrixSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    bias(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    divisor(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    edgeMode(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    kernelMatrix(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    kernelUnitLength(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    order(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    preserveAlpha(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    targetX(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    targetY(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes;
}

export interface FeDiffuseLightingSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    diffuseConstant(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    kernelUnitLength(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    surfaceScale(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes;
}

export interface FeDisplacementMapSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    in2(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    scale(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    xChannelSelector(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
    yChannelSelector(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes;
}

export interface FeDistantLightSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    azimuth(value: string | Stateful<string, Context>): FeDistantLightSVGElementAttributes;
    elevation(value: string | Stateful<string, Context>): FeDistantLightSVGElementAttributes;
}

export interface FeDropShadowSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    dx(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes;
    dy(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes;
    stdDeviation(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes;
}

export interface FeFloodSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes;
}

export interface FeFuncASVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    amplitude(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes;
    exponent(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes;
    intercept(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes;
    offset(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes;
    slope(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes;
    tableValues(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes;
    type(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes;
}

export interface FeFuncBSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    amplitude(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes;
    exponent(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes;
    intercept(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes;
    offset(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes;
    slope(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes;
    tableValues(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes;
    type(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes;
}

export interface FeFuncGSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    amplitude(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes;
    exponent(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes;
    intercept(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes;
    offset(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes;
    slope(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes;
    tableValues(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes;
    type(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes;
}

export interface FeFuncRSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    amplitude(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes;
    exponent(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes;
    intercept(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes;
    offset(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes;
    slope(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes;
    tableValues(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes;
    type(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes;
}

export interface FeGaussianBlurSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    edgeMode(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    stdDeviation(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes;
}

export interface FeImageSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    crossorigin(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    href(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    preserveAspectRatio(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeImageSVGElementAttributes;
}

export interface FeMergeSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes;
}

export interface FeMergeNodeSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    in(value: string | Stateful<string, Context>): FeMergeNodeSVGElementAttributes;
}

export interface FeMorphologySVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    operator(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    radius(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes;
}

export interface FeOffsetSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    dx(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    dy(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes;
}

export interface FePointLightSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    x(value: string | Stateful<string, Context>): FePointLightSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FePointLightSVGElementAttributes;
    z(value: string | Stateful<string, Context>): FePointLightSVGElementAttributes;
}

export interface FeSpecularLightingSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    kernelUnitLength(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    specularConstant(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    specularExponent(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    surfaceScale(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes;
}

export interface FeSpotLightSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    limitingConeAngle(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes;
    pointsAtX(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes;
    pointsAtY(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes;
    pointsAtZ(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes;
    specularExponent(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes;
    z(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes;
}

export interface FeTileSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    in(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeTileSVGElementAttributes;
}

export interface FeTurbulenceSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    baseFrequency(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    numOctaves(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    result(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    seed(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    stitchTiles(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    type(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes;
}

export interface FilterSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    color(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    display(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    filterRes(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    filterUnits(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    height(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    primitiveUnits(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    width(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    x(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
    y(value: string | Stateful<string, Context>): FilterSVGElementAttributes;
}

export interface ForeignObjectSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    color(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    display(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    height(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    width(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    x(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
    y(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes;
}

export interface GSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): GSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): GSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): GSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): GSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): GSVGElementAttributes;
    color(value: string | Stateful<string, Context>): GSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): GSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): GSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): GSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): GSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): GSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): GSVGElementAttributes;
    display(value: string | Stateful<string, Context>): GSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): GSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): GSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): GSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): GSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): GSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): GSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): GSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): GSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): GSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): GSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): GSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): GSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): GSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): GSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): GSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): GSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): GSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): GSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): GSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): GSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): GSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): GSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): GSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): GSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): GSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): GSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): GSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): GSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): GSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): GSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): GSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): GSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): GSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): GSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): GSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): GSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): GSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): GSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): GSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): GSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): GSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): GSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): GSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): GSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): GSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): GSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): GSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): GSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): GSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): GSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): GSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): GSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): GSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): GSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): GSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): GSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): GSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): GSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): GSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): GSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): GSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): GSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): GSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): GSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): GSVGElementAttributes;
}

export interface GlyphSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    arabicForm(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    color(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    d(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    display(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    glyphName(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    horizAdvX(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    orientation(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    unicode(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    vertAdvY(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    vertOriginX(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    vertOriginY(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): GlyphSVGElementAttributes;
}

export interface GlyphRefSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    color(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    display(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    dx(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    dy(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    format(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    glyphRef(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    x(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
    y(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes;
}

export interface HandlerSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    externalResourcesRequired(value: string | Stateful<string, Context>): HandlerSVGElementAttributes;
    type(value: string | Stateful<string, Context>): HandlerSVGElementAttributes;
}

export interface HkernSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    g1(value: string | Stateful<string, Context>): HkernSVGElementAttributes;
    g2(value: string | Stateful<string, Context>): HkernSVGElementAttributes;
    k(value: string | Stateful<string, Context>): HkernSVGElementAttributes;
    u1(value: string | Stateful<string, Context>): HkernSVGElementAttributes;
    u2(value: string | Stateful<string, Context>): HkernSVGElementAttributes;
}

export interface IframeSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    requiredExtensions(value: string | Stateful<string, Context>): IframeSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): IframeSVGElementAttributes;
}

export interface ImageSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    color(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    crossorigin(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    display(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    height(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    href(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    preserveAspectRatio(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    type(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    width(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    x(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
    y(value: string | Stateful<string, Context>): ImageSVGElementAttributes;
}

export interface LineSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    color(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    display(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    pathLength(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    x1(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    x2(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    y1(value: string | Stateful<string, Context>): LineSVGElementAttributes;
    y2(value: string | Stateful<string, Context>): LineSVGElementAttributes;
}

export interface LinearGradientSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    color(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    display(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    gradientTransform(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    gradientUnits(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    href(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    spreadMethod(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    x1(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    x2(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    y1(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
    y2(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes;
}

export interface ListenerSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    defaultAction(value: string | Stateful<string, Context>): ListenerSVGElementAttributes;
    event(value: string | Stateful<string, Context>): ListenerSVGElementAttributes;
    handler(value: string | Stateful<string, Context>): ListenerSVGElementAttributes;
    observer(value: string | Stateful<string, Context>): ListenerSVGElementAttributes;
    phase(value: string | Stateful<string, Context>): ListenerSVGElementAttributes;
    propagate(value: string | Stateful<string, Context>): ListenerSVGElementAttributes;
    target(value: string | Stateful<string, Context>): ListenerSVGElementAttributes;
}

export interface MarkerSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    color(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    display(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    markerHeight(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    markerUnits(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    markerWidth(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    orient(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    preserveAspectRatio(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    refX(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    refY(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    viewBox(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): MarkerSVGElementAttributes;
}

export interface MaskSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    color(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    display(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    height(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    maskContentUnits(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    maskUnits(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    width(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    x(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
    y(value: string | Stateful<string, Context>): MaskSVGElementAttributes;
}

export interface MetadataSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    requiredExtensions(value: string | Stateful<string, Context>): MetadataSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): MetadataSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): MetadataSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): MetadataSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): MetadataSVGElementAttributes;
}

export interface MpathSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    externalResourcesRequired(value: string | Stateful<string, Context>): MpathSVGElementAttributes;
    href(value: string | Stateful<string, Context>): MpathSVGElementAttributes;
}

export interface PathSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    color(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    d(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    display(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    pathLength(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): PathSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): PathSVGElementAttributes;
}

export interface PatternSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    color(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    display(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    height(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    href(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    patternContentUnits(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    patternTransform(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    patternUnits(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    preserveAspectRatio(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    viewBox(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    width(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    x(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
    y(value: string | Stateful<string, Context>): PatternSVGElementAttributes;
}

export interface PolygonSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    color(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    display(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    pathLength(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    points(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): PolygonSVGElementAttributes;
}

export interface PolylineSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    color(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    display(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    pathLength(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    points(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): PolylineSVGElementAttributes;
}

export interface PrefetchSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    bandwidth(value: string | Stateful<string, Context>): PrefetchSVGElementAttributes;
    mediaCharacterEncoding(value: string | Stateful<string, Context>): PrefetchSVGElementAttributes;
    mediaContentEncodings(value: string | Stateful<string, Context>): PrefetchSVGElementAttributes;
    mediaSize(value: string | Stateful<string, Context>): PrefetchSVGElementAttributes;
    mediaTime(value: string | Stateful<string, Context>): PrefetchSVGElementAttributes;
}

export interface RadialGradientSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    color(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    cx(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    cy(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    display(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fr(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fx(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    fy(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    gradientTransform(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    gradientUnits(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    href(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    r(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    spreadMethod(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes;
}

export interface RectSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    color(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    display(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    height(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    pathLength(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    rx(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    ry(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    width(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    x(value: string | Stateful<string, Context>): RectSVGElementAttributes;
    y(value: string | Stateful<string, Context>): RectSVGElementAttributes;
}

export interface ScriptSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    crossorigin(value: string | Stateful<string, Context>): ScriptSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): ScriptSVGElementAttributes;
    href(value: string | Stateful<string, Context>): ScriptSVGElementAttributes;
    type(value: string | Stateful<string, Context>): ScriptSVGElementAttributes;
}

export interface SetSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    attributeName(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    attributeType(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    begin(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    dur(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    end(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    href(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    max(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    min(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    repeatCount(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    repeatDur(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    restart(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): SetSVGElementAttributes;
    to(value: string | Stateful<string, Context>): SetSVGElementAttributes;
}

export interface SolidColorSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
}

export interface StopSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    color(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    display(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    offset(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): StopSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): StopSVGElementAttributes;
}

export interface StyleSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    media(value: string | Stateful<string, Context>): StyleSVGElementAttributes;
    title(value: string | Stateful<string, Context>): StyleSVGElementAttributes;
    type(value: string | Stateful<string, Context>): StyleSVGElementAttributes;
}

export interface SvgElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): SvgElementAttributes;
    baseProfile(value: string | Stateful<string, Context>): SvgElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): SvgElementAttributes;
    clip(value: string | Stateful<string, Context>): SvgElementAttributes;
    clipPath(value: string | Stateful<string, Context>): SvgElementAttributes;
    clipRule(value: string | Stateful<string, Context>): SvgElementAttributes;
    color(value: string | Stateful<string, Context>): SvgElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): SvgElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): SvgElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): SvgElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): SvgElementAttributes;
    contentScriptType(value: string | Stateful<string, Context>): SvgElementAttributes;
    contentStyleType(value: string | Stateful<string, Context>): SvgElementAttributes;
    cursor(value: string | Stateful<string, Context>): SvgElementAttributes;
    direction(value: string | Stateful<string, Context>): SvgElementAttributes;
    display(value: string | Stateful<string, Context>): SvgElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): SvgElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): SvgElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): SvgElementAttributes;
    fill(value: string | Stateful<string, Context>): SvgElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): SvgElementAttributes;
    fillRule(value: string | Stateful<string, Context>): SvgElementAttributes;
    filter(value: string | Stateful<string, Context>): SvgElementAttributes;
    floodColor(value: string | Stateful<string, Context>): SvgElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): SvgElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): SvgElementAttributes;
    focusable(value: string | Stateful<string, Context>): SvgElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): SvgElementAttributes;
    fontSize(value: string | Stateful<string, Context>): SvgElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): SvgElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): SvgElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): SvgElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): SvgElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): SvgElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): SvgElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): SvgElementAttributes;
    height(value: string | Stateful<string, Context>): SvgElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): SvgElementAttributes;
    kerning(value: string | Stateful<string, Context>): SvgElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): SvgElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): SvgElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): SvgElementAttributes;
    markerMid(value: string | Stateful<string, Context>): SvgElementAttributes;
    markerStart(value: string | Stateful<string, Context>): SvgElementAttributes;
    mask(value: string | Stateful<string, Context>): SvgElementAttributes;
    navDown(value: string | Stateful<string, Context>): SvgElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): SvgElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): SvgElementAttributes;
    navLeft(value: string | Stateful<string, Context>): SvgElementAttributes;
    navNext(value: string | Stateful<string, Context>): SvgElementAttributes;
    navPrev(value: string | Stateful<string, Context>): SvgElementAttributes;
    navRight(value: string | Stateful<string, Context>): SvgElementAttributes;
    navUp(value: string | Stateful<string, Context>): SvgElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): SvgElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): SvgElementAttributes;
    opacity(value: string | Stateful<string, Context>): SvgElementAttributes;
    overflow(value: string | Stateful<string, Context>): SvgElementAttributes;
    playbackOrder(value: string | Stateful<string, Context>): SvgElementAttributes;
    playbackorder(value: string | Stateful<string, Context>): SvgElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): SvgElementAttributes;
    preserveAspectRatio(value: string | Stateful<string, Context>): SvgElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): SvgElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): SvgElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): SvgElementAttributes;
    snapshotTime(value: string | Stateful<string, Context>): SvgElementAttributes;
    stopColor(value: string | Stateful<string, Context>): SvgElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): SvgElementAttributes;
    stroke(value: string | Stateful<string, Context>): SvgElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): SvgElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): SvgElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): SvgElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): SvgElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): SvgElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): SvgElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): SvgElementAttributes;
    syncBehaviorDefault(value: string | Stateful<string, Context>): SvgElementAttributes;
    syncToleranceDefault(value: string | Stateful<string, Context>): SvgElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): SvgElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): SvgElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): SvgElementAttributes;
    textRendering(value: string | Stateful<string, Context>): SvgElementAttributes;
    timelineBegin(value: string | Stateful<string, Context>): SvgElementAttributes;
    timelinebegin(value: string | Stateful<string, Context>): SvgElementAttributes;
    transform(value: string | Stateful<string, Context>): SvgElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): SvgElementAttributes;
    version(value: string | Stateful<string, Context>): SvgElementAttributes;
    viewBox(value: string | Stateful<string, Context>): SvgElementAttributes;
    visibility(value: string | Stateful<string, Context>): SvgElementAttributes;
    width(value: string | Stateful<string, Context>): SvgElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): SvgElementAttributes;
    writingMode(value: string | Stateful<string, Context>): SvgElementAttributes;
    x(value: string | Stateful<string, Context>): SvgElementAttributes;
    y(value: string | Stateful<string, Context>): SvgElementAttributes;
    zoomAndPan(value: string | Stateful<string, Context>): SvgElementAttributes;
}

export interface SwitchSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    color(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    display(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): SwitchSVGElementAttributes;
}

export interface SymbolSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    color(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    display(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    preserveAspectRatio(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    refX(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    refY(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    viewBox(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): SymbolSVGElementAttributes;
}

export interface TbreakSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    requiredExtensions(value: string | Stateful<string, Context>): TbreakSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): TbreakSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): TbreakSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): TbreakSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): TbreakSVGElementAttributes;
}

export interface TextSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    color(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    display(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    dx(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    dy(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    editable(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    lengthAdjust(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    rotate(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    textLength(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    x(value: string | Stateful<string, Context>): TextSVGElementAttributes;
    y(value: string | Stateful<string, Context>): TextSVGElementAttributes;
}

export interface TextAreaSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    editable(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    height(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    width(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    x(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
    y(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes;
}

export interface TextPathSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    color(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    display(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    href(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    lengthAdjust(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    method(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    path(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    side(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    spacing(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    startOffset(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    textLength(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): TextPathSVGElementAttributes;
}

export interface TitleSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    requiredExtensions(value: string | Stateful<string, Context>): TitleSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): TitleSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): TitleSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): TitleSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): TitleSVGElementAttributes;
}

export interface TrefSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    color(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    display(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    dx(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    dy(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    lengthAdjust(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    rotate(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    textLength(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    x(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
    y(value: string | Stateful<string, Context>): TrefSVGElementAttributes;
}

export interface TspanSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    color(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    display(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    dx(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    dy(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    lengthAdjust(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    rotate(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    textLength(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    x(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
    y(value: string | Stateful<string, Context>): TspanSVGElementAttributes;
}

export interface UnknownSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    requiredExtensions(value: string | Stateful<string, Context>): UnknownSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): UnknownSVGElementAttributes;
}

export interface UseSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    baselineShift(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    clip(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    clipPath(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    clipRule(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    color(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    colorInterpolation(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    colorInterpolationFilters(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    colorProfile(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    colorRendering(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    cursor(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    direction(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    display(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    dominantBaseline(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    enableBackground(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    fillOpacity(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    fillRule(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    filter(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    floodColor(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    floodOpacity(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    fontFamily(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    fontSize(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    fontSizeAdjust(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    fontStretch(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    fontStyle(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    fontVariant(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    fontWeight(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    glyphOrientationVertical(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    height(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    href(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    imageRendering(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    kerning(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    letterSpacing(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    lightingColor(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    markerEnd(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    markerMid(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    markerStart(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    mask(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    opacity(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    overflow(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    pointerEvents(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    shapeRendering(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    stopColor(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    stopOpacity(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    stroke(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    strokeDasharray(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    strokeDashoffset(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    strokeLinecap(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    strokeLinejoin(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    strokeMiterlimit(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    strokeOpacity(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    strokeWidth(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    textAnchor(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    textDecoration(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    textRendering(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    unicodeBidi(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    visibility(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    width(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    wordSpacing(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    writingMode(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    x(value: string | Stateful<string, Context>): UseSVGElementAttributes;
    y(value: string | Stateful<string, Context>): UseSVGElementAttributes;
}

export interface VideoSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    begin(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    dur(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    end(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    externalResourcesRequired(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    fill(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    focusHighlight(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    focusable(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    height(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    initialVisibility(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    max(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    min(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    navDown(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    navDownLeft(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    navDownRight(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    navLeft(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    navNext(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    navPrev(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    navRight(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    navUp(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    navUpLeft(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    navUpRight(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    overlay(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    preserveAspectRatio(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    repeatCount(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    repeatDur(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    requiredExtensions(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    requiredFeatures(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    requiredFonts(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    requiredFormats(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    restart(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    syncBehavior(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    syncMaster(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    syncTolerance(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    systemLanguage(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    transform(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    transformBehavior(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    type(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    width(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    x(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
    y(value: string | Stateful<string, Context>): VideoSVGElementAttributes;
}

export interface ViewSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    externalResourcesRequired(value: string | Stateful<string, Context>): ViewSVGElementAttributes;
    preserveAspectRatio(value: string | Stateful<string, Context>): ViewSVGElementAttributes;
    viewBox(value: string | Stateful<string, Context>): ViewSVGElementAttributes;
    viewTarget(value: string | Stateful<string, Context>): ViewSVGElementAttributes;
    zoomAndPan(value: string | Stateful<string, Context>): ViewSVGElementAttributes;
}

export interface VkernSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    g1(value: string | Stateful<string, Context>): VkernSVGElementAttributes;
    g2(value: string | Stateful<string, Context>): VkernSVGElementAttributes;
    k(value: string | Stateful<string, Context>): VkernSVGElementAttributes;
    u1(value: string | Stateful<string, Context>): VkernSVGElementAttributes;
    u2(value: string | Stateful<string, Context>): VkernSVGElementAttributes;
}

export const svgAttributeNames: Map<string, string> = new Map();
svgAttributeNames.set("alignmentBaseline", "alignment-baseline")
svgAttributeNames.set("baselineShift", "baseline-shift")
svgAttributeNames.set("clipPath", "clip-path")
svgAttributeNames.set("clipRule", "clip-rule")
svgAttributeNames.set("colorInterpolation", "color-interpolation")
svgAttributeNames.set("colorInterpolationFilters", "color-interpolation-filters")
svgAttributeNames.set("colorProfile", "color-profile")
svgAttributeNames.set("colorRendering", "color-rendering")
svgAttributeNames.set("dominantBaseline", "dominant-baseline")
svgAttributeNames.set("enableBackground", "enable-background")
svgAttributeNames.set("fillOpacity", "fill-opacity")
svgAttributeNames.set("fillRule", "fill-rule")
svgAttributeNames.set("floodColor", "flood-color")
svgAttributeNames.set("floodOpacity", "flood-opacity")
svgAttributeNames.set("fontFamily", "font-family")
svgAttributeNames.set("fontSize", "font-size")
svgAttributeNames.set("fontSizeAdjust", "font-size-adjust")
svgAttributeNames.set("fontStretch", "font-stretch")
svgAttributeNames.set("fontStyle", "font-style")
svgAttributeNames.set("fontVariant", "font-variant")
svgAttributeNames.set("fontWeight", "font-weight")
svgAttributeNames.set("glyphOrientationHorizontal", "glyph-orientation-horizontal")
svgAttributeNames.set("glyphOrientationVertical", "glyph-orientation-vertical")
svgAttributeNames.set("imageRendering", "image-rendering")
svgAttributeNames.set("letterSpacing", "letter-spacing")
svgAttributeNames.set("lightingColor", "lighting-color")
svgAttributeNames.set("markerEnd", "marker-end")
svgAttributeNames.set("markerMid", "marker-mid")
svgAttributeNames.set("markerStart", "marker-start")
svgAttributeNames.set("navDown", "nav-down")
svgAttributeNames.set("navDownLeft", "nav-down-left")
svgAttributeNames.set("navDownRight", "nav-down-right")
svgAttributeNames.set("navLeft", "nav-left")
svgAttributeNames.set("navNext", "nav-next")
svgAttributeNames.set("navPrev", "nav-prev")
svgAttributeNames.set("navRight", "nav-right")
svgAttributeNames.set("navUp", "nav-up")
svgAttributeNames.set("navUpLeft", "nav-up-left")
svgAttributeNames.set("navUpRight", "nav-up-right")
svgAttributeNames.set("pointerEvents", "pointer-events")
svgAttributeNames.set("shapeRendering", "shape-rendering")
svgAttributeNames.set("stopColor", "stop-color")
svgAttributeNames.set("stopOpacity", "stop-opacity")
svgAttributeNames.set("strokeDasharray", "stroke-dasharray")
svgAttributeNames.set("strokeDashoffset", "stroke-dashoffset")
svgAttributeNames.set("strokeLinecap", "stroke-linecap")
svgAttributeNames.set("strokeLinejoin", "stroke-linejoin")
svgAttributeNames.set("strokeMiterlimit", "stroke-miterlimit")
svgAttributeNames.set("strokeOpacity", "stroke-opacity")
svgAttributeNames.set("strokeWidth", "stroke-width")
svgAttributeNames.set("textAnchor", "text-anchor")
svgAttributeNames.set("textDecoration", "text-decoration")
svgAttributeNames.set("textRendering", "text-rendering")
svgAttributeNames.set("unicodeBidi", "unicode-bidi")
svgAttributeNames.set("wordSpacing", "word-spacing")
svgAttributeNames.set("writingMode", "writing-mode")
svgAttributeNames.set("renderingIntent", "rendering-intent")
svgAttributeNames.set("horizAdvX", "horiz-adv-x")
svgAttributeNames.set("horizOriginX", "horiz-origin-x")
svgAttributeNames.set("horizOriginY", "horiz-origin-y")
svgAttributeNames.set("vertAdvY", "vert-adv-y")
svgAttributeNames.set("vertOriginX", "vert-origin-x")
svgAttributeNames.set("vertOriginY", "vert-origin-y")
svgAttributeNames.set("accentHeight", "accent-height")
svgAttributeNames.set("capHeight", "cap-height")
svgAttributeNames.set("overlinePosition", "overline-position")
svgAttributeNames.set("overlineThickness", "overline-thickness")
svgAttributeNames.set("panose1", "panose-1")
svgAttributeNames.set("strikethroughPosition", "strikethrough-position")
svgAttributeNames.set("strikethroughThickness", "strikethrough-thickness")
svgAttributeNames.set("underlinePosition", "underline-position")
svgAttributeNames.set("underlineThickness", "underline-thickness")
svgAttributeNames.set("unicodeRange", "unicode-range")
svgAttributeNames.set("unitsPerEm", "units-per-em")
svgAttributeNames.set("vAlphabetic", "v-alphabetic")
svgAttributeNames.set("vHanging", "v-hanging")
svgAttributeNames.set("vIdeographic", "v-ideographic")
svgAttributeNames.set("vMathematical", "v-mathematical")
svgAttributeNames.set("xHeight", "x-height")
svgAttributeNames.set("arabicForm", "arabic-form")
svgAttributeNames.set("glyphName", "glyph-name")
