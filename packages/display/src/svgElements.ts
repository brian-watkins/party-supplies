import { ConfigurableElement, SpecialElements, SpecialElementBuilder, View, Stateful } from "./view.js";
import { SpecialAttributes } from "./viewConfig.js";

export interface SVGBuilder<Context> extends SpecialElementBuilder<Context> {
    a(builder?: (element: ConfigurableElement<ASVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    altGlyph(builder?: (element: ConfigurableElement<AltGlyphSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    altGlyphDef(builder?: (element: ConfigurableElement<AltGlyphDefSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    altGlyphItem(builder?: (element: ConfigurableElement<AltGlyphItemSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    animate(builder?: (element: ConfigurableElement<AnimateSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    animateColor(builder?: (element: ConfigurableElement<AnimateColorSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    animateMotion(builder?: (element: ConfigurableElement<AnimateMotionSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    animateTransform(builder?: (element: ConfigurableElement<AnimateTransformSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    animation(builder?: (element: ConfigurableElement<AnimationSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    audio(builder?: (element: ConfigurableElement<AudioSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    canvas(builder?: (element: ConfigurableElement<CanvasSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    circle(builder?: (element: ConfigurableElement<CircleSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    clipPath(builder?: (element: ConfigurableElement<ClipPathSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    cursor(builder?: (element: ConfigurableElement<CursorSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    defs(builder?: (element: ConfigurableElement<DefsSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    desc(builder?: (element: ConfigurableElement<DescSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    discard(builder?: (element: ConfigurableElement<DiscardSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    ellipse(builder?: (element: ConfigurableElement<EllipseSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feBlend(builder?: (element: ConfigurableElement<FeBlendSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feColorMatrix(builder?: (element: ConfigurableElement<FeColorMatrixSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feComponentTransfer(builder?: (element: ConfigurableElement<FeComponentTransferSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feComposite(builder?: (element: ConfigurableElement<FeCompositeSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feConvolveMatrix(builder?: (element: ConfigurableElement<FeConvolveMatrixSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feDiffuseLighting(builder?: (element: ConfigurableElement<FeDiffuseLightingSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feDisplacementMap(builder?: (element: ConfigurableElement<FeDisplacementMapSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feDistantLight(builder?: (element: ConfigurableElement<FeDistantLightSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feDropShadow(builder?: (element: ConfigurableElement<FeDropShadowSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feFlood(builder?: (element: ConfigurableElement<FeFloodSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feFuncA(builder?: (element: ConfigurableElement<FeFuncASVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feFuncB(builder?: (element: ConfigurableElement<FeFuncBSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feFuncG(builder?: (element: ConfigurableElement<FeFuncGSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feFuncR(builder?: (element: ConfigurableElement<FeFuncRSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feGaussianBlur(builder?: (element: ConfigurableElement<FeGaussianBlurSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feImage(builder?: (element: ConfigurableElement<FeImageSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feMerge(builder?: (element: ConfigurableElement<FeMergeSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feMergeNode(builder?: (element: ConfigurableElement<FeMergeNodeSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feMorphology(builder?: (element: ConfigurableElement<FeMorphologySVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feOffset(builder?: (element: ConfigurableElement<FeOffsetSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    fePointLight(builder?: (element: ConfigurableElement<FePointLightSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feSpecularLighting(builder?: (element: ConfigurableElement<FeSpecularLightingSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feSpotLight(builder?: (element: ConfigurableElement<FeSpotLightSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feTile(builder?: (element: ConfigurableElement<FeTileSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    feTurbulence(builder?: (element: ConfigurableElement<FeTurbulenceSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    filter(builder?: (element: ConfigurableElement<FilterSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    foreignObject(builder?: (element: ConfigurableElement<ForeignObjectSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    g(builder?: (element: ConfigurableElement<GSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    glyph(builder?: (element: ConfigurableElement<GlyphSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    glyphRef(builder?: (element: ConfigurableElement<GlyphRefSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    handler(builder?: (element: ConfigurableElement<HandlerSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    hkern(builder?: (element: ConfigurableElement<HkernSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    iframe(builder?: (element: ConfigurableElement<IframeSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    image(builder?: (element: ConfigurableElement<ImageSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    line(builder?: (element: ConfigurableElement<LineSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    linearGradient(builder?: (element: ConfigurableElement<LinearGradientSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    listener(builder?: (element: ConfigurableElement<ListenerSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    marker(builder?: (element: ConfigurableElement<MarkerSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    mask(builder?: (element: ConfigurableElement<MaskSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    metadata(builder?: (element: ConfigurableElement<MetadataSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    mpath(builder?: (element: ConfigurableElement<MpathSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    path(builder?: (element: ConfigurableElement<PathSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    pattern(builder?: (element: ConfigurableElement<PatternSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    polygon(builder?: (element: ConfigurableElement<PolygonSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    polyline(builder?: (element: ConfigurableElement<PolylineSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    prefetch(builder?: (element: ConfigurableElement<PrefetchSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    radialGradient(builder?: (element: ConfigurableElement<RadialGradientSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    rect(builder?: (element: ConfigurableElement<RectSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    script(builder?: (element: ConfigurableElement<ScriptSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    set(builder?: (element: ConfigurableElement<SetSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    solidColor(builder?: (element: ConfigurableElement<SolidColorSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    stop(builder?: (element: ConfigurableElement<StopSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    style(builder?: (element: ConfigurableElement<StyleSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    svg(builder?: (element: ConfigurableElement<SvgElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    switch(builder?: (element: ConfigurableElement<SwitchSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    symbol(builder?: (element: ConfigurableElement<SymbolSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    tbreak(builder?: (element: ConfigurableElement<TbreakSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    text(builder?: (element: ConfigurableElement<TextSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    textArea(builder?: (element: ConfigurableElement<TextAreaSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    textPath(builder?: (element: ConfigurableElement<TextPathSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    title(builder?: (element: ConfigurableElement<TitleSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    tref(builder?: (element: ConfigurableElement<TrefSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    tspan(builder?: (element: ConfigurableElement<TspanSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    unknown(builder?: (element: ConfigurableElement<UnknownSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    use(builder?: (element: ConfigurableElement<UseSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    video(builder?: (element: ConfigurableElement<VideoSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    view(builder?: (element: ConfigurableElement<ViewSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
    vkern(builder?: (element: ConfigurableElement<VkernSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): View;
}

export interface SVGElements<Context> extends SpecialElements<Context> {
    a(builder?: (element: ConfigurableElement<ASVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    altGlyph(builder?: (element: ConfigurableElement<AltGlyphSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    altGlyphDef(builder?: (element: ConfigurableElement<AltGlyphDefSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    altGlyphItem(builder?: (element: ConfigurableElement<AltGlyphItemSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    animate(builder?: (element: ConfigurableElement<AnimateSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    animateColor(builder?: (element: ConfigurableElement<AnimateColorSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    animateMotion(builder?: (element: ConfigurableElement<AnimateMotionSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    animateTransform(builder?: (element: ConfigurableElement<AnimateTransformSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    animation(builder?: (element: ConfigurableElement<AnimationSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    audio(builder?: (element: ConfigurableElement<AudioSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    canvas(builder?: (element: ConfigurableElement<CanvasSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    circle(builder?: (element: ConfigurableElement<CircleSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    clipPath(builder?: (element: ConfigurableElement<ClipPathSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    cursor(builder?: (element: ConfigurableElement<CursorSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    defs(builder?: (element: ConfigurableElement<DefsSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    desc(builder?: (element: ConfigurableElement<DescSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    discard(builder?: (element: ConfigurableElement<DiscardSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    ellipse(builder?: (element: ConfigurableElement<EllipseSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feBlend(builder?: (element: ConfigurableElement<FeBlendSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feColorMatrix(builder?: (element: ConfigurableElement<FeColorMatrixSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feComponentTransfer(builder?: (element: ConfigurableElement<FeComponentTransferSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feComposite(builder?: (element: ConfigurableElement<FeCompositeSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feConvolveMatrix(builder?: (element: ConfigurableElement<FeConvolveMatrixSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feDiffuseLighting(builder?: (element: ConfigurableElement<FeDiffuseLightingSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feDisplacementMap(builder?: (element: ConfigurableElement<FeDisplacementMapSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feDistantLight(builder?: (element: ConfigurableElement<FeDistantLightSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feDropShadow(builder?: (element: ConfigurableElement<FeDropShadowSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feFlood(builder?: (element: ConfigurableElement<FeFloodSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feFuncA(builder?: (element: ConfigurableElement<FeFuncASVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feFuncB(builder?: (element: ConfigurableElement<FeFuncBSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feFuncG(builder?: (element: ConfigurableElement<FeFuncGSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feFuncR(builder?: (element: ConfigurableElement<FeFuncRSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feGaussianBlur(builder?: (element: ConfigurableElement<FeGaussianBlurSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feImage(builder?: (element: ConfigurableElement<FeImageSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feMerge(builder?: (element: ConfigurableElement<FeMergeSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feMergeNode(builder?: (element: ConfigurableElement<FeMergeNodeSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feMorphology(builder?: (element: ConfigurableElement<FeMorphologySVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feOffset(builder?: (element: ConfigurableElement<FeOffsetSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    fePointLight(builder?: (element: ConfigurableElement<FePointLightSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feSpecularLighting(builder?: (element: ConfigurableElement<FeSpecularLightingSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feSpotLight(builder?: (element: ConfigurableElement<FeSpotLightSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feTile(builder?: (element: ConfigurableElement<FeTileSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    feTurbulence(builder?: (element: ConfigurableElement<FeTurbulenceSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    filter(builder?: (element: ConfigurableElement<FilterSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    foreignObject(builder?: (element: ConfigurableElement<ForeignObjectSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    g(builder?: (element: ConfigurableElement<GSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    glyph(builder?: (element: ConfigurableElement<GlyphSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    glyphRef(builder?: (element: ConfigurableElement<GlyphRefSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    handler(builder?: (element: ConfigurableElement<HandlerSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    hkern(builder?: (element: ConfigurableElement<HkernSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    iframe(builder?: (element: ConfigurableElement<IframeSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    image(builder?: (element: ConfigurableElement<ImageSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    line(builder?: (element: ConfigurableElement<LineSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    linearGradient(builder?: (element: ConfigurableElement<LinearGradientSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    listener(builder?: (element: ConfigurableElement<ListenerSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    marker(builder?: (element: ConfigurableElement<MarkerSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    mask(builder?: (element: ConfigurableElement<MaskSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    metadata(builder?: (element: ConfigurableElement<MetadataSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    mpath(builder?: (element: ConfigurableElement<MpathSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    path(builder?: (element: ConfigurableElement<PathSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    pattern(builder?: (element: ConfigurableElement<PatternSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    polygon(builder?: (element: ConfigurableElement<PolygonSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    polyline(builder?: (element: ConfigurableElement<PolylineSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    prefetch(builder?: (element: ConfigurableElement<PrefetchSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    radialGradient(builder?: (element: ConfigurableElement<RadialGradientSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    rect(builder?: (element: ConfigurableElement<RectSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    script(builder?: (element: ConfigurableElement<ScriptSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    set(builder?: (element: ConfigurableElement<SetSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    solidColor(builder?: (element: ConfigurableElement<SolidColorSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    stop(builder?: (element: ConfigurableElement<StopSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    style(builder?: (element: ConfigurableElement<StyleSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    svg(builder?: (element: ConfigurableElement<SvgElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    switch(builder?: (element: ConfigurableElement<SwitchSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    symbol(builder?: (element: ConfigurableElement<SymbolSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    tbreak(builder?: (element: ConfigurableElement<TbreakSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    text(builder?: (element: ConfigurableElement<TextSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    textArea(builder?: (element: ConfigurableElement<TextAreaSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    textPath(builder?: (element: ConfigurableElement<TextPathSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    title(builder?: (element: ConfigurableElement<TitleSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    tref(builder?: (element: ConfigurableElement<TrefSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    tspan(builder?: (element: ConfigurableElement<TspanSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    unknown(builder?: (element: ConfigurableElement<UnknownSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    use(builder?: (element: ConfigurableElement<UseSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    video(builder?: (element: ConfigurableElement<VideoSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    view(builder?: (element: ConfigurableElement<ViewSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
    vkern(builder?: (element: ConfigurableElement<VkernSVGElementAttributes<Context>, SVGElements<Context>, Context>) => void): this;
}

export interface GlobalSVGAttributes<Context> {
    about(value: string | Stateful<string, Context>): this;
    class(value: string | Stateful<string, Context>): this;
    content(value: string | Stateful<string, Context>): this;
    datatype(value: string | Stateful<string, Context>): this;
    id(value: string | Stateful<string, Context>): this;
    lang(value: string | Stateful<string, Context>): this;
    property(value: string | Stateful<string, Context>): this;
    rel(value: string | Stateful<string, Context>): this;
    resource(value: string | Stateful<string, Context>): this;
    rev(value: string | Stateful<string, Context>): this;
    style(value: string | Stateful<string, Context>): this;
    tabindex(value: string | Stateful<string, Context>): this;
    typeof(value: string | Stateful<string, Context>): this;
}

export interface ASVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    download(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    hreflang(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    ping(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    referrerpolicy(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    target(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): ASVGElementAttributes<Context>;
}

export interface AltGlyphSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    dx(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    dy(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    format(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    glyphRef(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    rotate(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): AltGlyphSVGElementAttributes<Context>;
}

export interface AltGlyphDefSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
}

export interface AltGlyphItemSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
}

export interface AnimateSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    accumulate(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    additive(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    alignmentBaseline(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    attributeName(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    attributeType(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    begin(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    by(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    calcMode(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    dur(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    end(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    from(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    keySplines(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    keyTimes(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    max(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    min(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    repeatCount(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    repeatDur(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    restart(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    to(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    values(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): AnimateSVGElementAttributes<Context>;
}

export interface AnimateColorSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    accumulate(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    additive(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    alignmentBaseline(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    attributeName(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    attributeType(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    begin(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    by(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    calcMode(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    dur(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    end(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    from(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    keySplines(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    keyTimes(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    max(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    min(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    repeatCount(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    repeatDur(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    restart(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    to(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    values(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): AnimateColorSVGElementAttributes<Context>;
}

export interface AnimateMotionSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    accumulate(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    additive(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    begin(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    by(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    calcMode(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    dur(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    end(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    from(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    keyPoints(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    keySplines(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    keyTimes(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    max(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    min(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    origin(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    path(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    repeatCount(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    repeatDur(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    restart(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    rotate(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    to(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
    values(value: string | Stateful<string, Context>): AnimateMotionSVGElementAttributes<Context>;
}

export interface AnimateTransformSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    accumulate(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    additive(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    attributeName(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    attributeType(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    begin(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    by(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    calcMode(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    dur(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    end(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    from(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    keySplines(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    keyTimes(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    max(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    min(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    repeatCount(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    repeatDur(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    restart(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    to(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
    values(value: string | Stateful<string, Context>): AnimateTransformSVGElementAttributes<Context>;
}

export interface AnimationSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    begin(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    dur(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    end(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    initialVisibility(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    max(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    min(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    preserveAspectRatio(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    repeatCount(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    repeatDur(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    restart(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    syncBehavior(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    syncMaster(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    syncTolerance(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): AnimationSVGElementAttributes<Context>;
}

export interface AudioSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    begin(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    dur(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    end(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    max(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    min(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    repeatCount(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    repeatDur(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    restart(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    syncBehavior(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    syncMaster(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    syncTolerance(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): AudioSVGElementAttributes<Context>;
}

export interface CanvasSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    preserveAspectRatio(value: string | Stateful<string, Context>): CanvasSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): CanvasSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): CanvasSVGElementAttributes<Context>;
}

export interface CircleSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    cx(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    cy(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    pathLength(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    r(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): CircleSVGElementAttributes<Context>;
}

export interface ClipPathSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    clipPathUnits(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): ClipPathSVGElementAttributes<Context>;
}

export interface CursorSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    externalResourcesRequired(value: string | Stateful<string, Context>): CursorSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): CursorSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): CursorSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): CursorSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): CursorSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): CursorSVGElementAttributes<Context>;
}

export interface DefsSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): DefsSVGElementAttributes<Context>;
}

export interface DescSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    requiredExtensions(value: string | Stateful<string, Context>): DescSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): DescSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): DescSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): DescSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): DescSVGElementAttributes<Context>;
}

export interface DiscardSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    begin(value: string | Stateful<string, Context>): DiscardSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): DiscardSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): DiscardSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): DiscardSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): DiscardSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): DiscardSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): DiscardSVGElementAttributes<Context>;
}

export interface EllipseSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    cx(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    cy(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    pathLength(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    rx(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    ry(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): EllipseSVGElementAttributes<Context>;
}

export interface FeBlendSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    in2(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    mode(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeBlendSVGElementAttributes<Context>;
}

export interface FeColorMatrixSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    values(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeColorMatrixSVGElementAttributes<Context>;
}

export interface FeComponentTransferSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeComponentTransferSVGElementAttributes<Context>;
}

export interface FeCompositeSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    in2(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    k1(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    k2(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    k3(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    k4(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    operator(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeCompositeSVGElementAttributes<Context>;
}

export interface FeConvolveMatrixSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    bias(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    divisor(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    edgeMode(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    kernelMatrix(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    kernelUnitLength(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    order(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    preserveAlpha(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    targetX(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    targetY(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeConvolveMatrixSVGElementAttributes<Context>;
}

export interface FeDiffuseLightingSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    diffuseConstant(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    kernelUnitLength(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    surfaceScale(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeDiffuseLightingSVGElementAttributes<Context>;
}

export interface FeDisplacementMapSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    in2(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    scale(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    xChannelSelector(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
    yChannelSelector(value: string | Stateful<string, Context>): FeDisplacementMapSVGElementAttributes<Context>;
}

export interface FeDistantLightSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    azimuth(value: string | Stateful<string, Context>): FeDistantLightSVGElementAttributes<Context>;
    elevation(value: string | Stateful<string, Context>): FeDistantLightSVGElementAttributes<Context>;
}

export interface FeDropShadowSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    dx(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes<Context>;
    dy(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes<Context>;
    stdDeviation(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeDropShadowSVGElementAttributes<Context>;
}

export interface FeFloodSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeFloodSVGElementAttributes<Context>;
}

export interface FeFuncASVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    amplitude(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes<Context>;
    exponent(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes<Context>;
    intercept(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes<Context>;
    offset(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes<Context>;
    slope(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes<Context>;
    tableValues(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): FeFuncASVGElementAttributes<Context>;
}

export interface FeFuncBSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    amplitude(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes<Context>;
    exponent(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes<Context>;
    intercept(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes<Context>;
    offset(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes<Context>;
    slope(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes<Context>;
    tableValues(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): FeFuncBSVGElementAttributes<Context>;
}

export interface FeFuncGSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    amplitude(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes<Context>;
    exponent(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes<Context>;
    intercept(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes<Context>;
    offset(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes<Context>;
    slope(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes<Context>;
    tableValues(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): FeFuncGSVGElementAttributes<Context>;
}

export interface FeFuncRSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    amplitude(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes<Context>;
    exponent(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes<Context>;
    intercept(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes<Context>;
    offset(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes<Context>;
    slope(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes<Context>;
    tableValues(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): FeFuncRSVGElementAttributes<Context>;
}

export interface FeGaussianBlurSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    edgeMode(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    stdDeviation(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeGaussianBlurSVGElementAttributes<Context>;
}

export interface FeImageSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    crossorigin(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    preserveAspectRatio(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeImageSVGElementAttributes<Context>;
}

export interface FeMergeSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeMergeSVGElementAttributes<Context>;
}

export interface FeMergeNodeSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    in(value: string | Stateful<string, Context>): FeMergeNodeSVGElementAttributes<Context>;
}

export interface FeMorphologySVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    operator(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    radius(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeMorphologySVGElementAttributes<Context>;
}

export interface FeOffsetSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    dx(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    dy(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeOffsetSVGElementAttributes<Context>;
}

export interface FePointLightSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    x(value: string | Stateful<string, Context>): FePointLightSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FePointLightSVGElementAttributes<Context>;
    z(value: string | Stateful<string, Context>): FePointLightSVGElementAttributes<Context>;
}

export interface FeSpecularLightingSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    kernelUnitLength(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    specularConstant(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    specularExponent(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    surfaceScale(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeSpecularLightingSVGElementAttributes<Context>;
}

export interface FeSpotLightSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    limitingConeAngle(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes<Context>;
    pointsAtX(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes<Context>;
    pointsAtY(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes<Context>;
    pointsAtZ(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes<Context>;
    specularExponent(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes<Context>;
    z(value: string | Stateful<string, Context>): FeSpotLightSVGElementAttributes<Context>;
}

export interface FeTileSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    in(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeTileSVGElementAttributes<Context>;
}

export interface FeTurbulenceSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    baseFrequency(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    numOctaves(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    result(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    seed(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    stitchTiles(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FeTurbulenceSVGElementAttributes<Context>;
}

export interface FilterSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    filterRes(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    filterUnits(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    primitiveUnits(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): FilterSVGElementAttributes<Context>;
}

export interface ForeignObjectSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): ForeignObjectSVGElementAttributes<Context>;
}

export interface GSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): GSVGElementAttributes<Context>;
}

export interface GlyphSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    arabicForm(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    d(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    glyphName(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    horizAdvX(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    orientation(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    unicode(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    vertAdvY(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    vertOriginX(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    vertOriginY(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): GlyphSVGElementAttributes<Context>;
}

export interface GlyphRefSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    dx(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    dy(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    format(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    glyphRef(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): GlyphRefSVGElementAttributes<Context>;
}

export interface HandlerSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    externalResourcesRequired(value: string | Stateful<string, Context>): HandlerSVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): HandlerSVGElementAttributes<Context>;
}

export interface HkernSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    g1(value: string | Stateful<string, Context>): HkernSVGElementAttributes<Context>;
    g2(value: string | Stateful<string, Context>): HkernSVGElementAttributes<Context>;
    k(value: string | Stateful<string, Context>): HkernSVGElementAttributes<Context>;
    u1(value: string | Stateful<string, Context>): HkernSVGElementAttributes<Context>;
    u2(value: string | Stateful<string, Context>): HkernSVGElementAttributes<Context>;
}

export interface IframeSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    requiredExtensions(value: string | Stateful<string, Context>): IframeSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): IframeSVGElementAttributes<Context>;
}

export interface ImageSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    crossorigin(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    preserveAspectRatio(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): ImageSVGElementAttributes<Context>;
}

export interface LineSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    pathLength(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    x1(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    x2(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    y1(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
    y2(value: string | Stateful<string, Context>): LineSVGElementAttributes<Context>;
}

export interface LinearGradientSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    gradientTransform(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    gradientUnits(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    spreadMethod(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    x1(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    x2(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    y1(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
    y2(value: string | Stateful<string, Context>): LinearGradientSVGElementAttributes<Context>;
}

export interface ListenerSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    defaultAction(value: string | Stateful<string, Context>): ListenerSVGElementAttributes<Context>;
    event(value: string | Stateful<string, Context>): ListenerSVGElementAttributes<Context>;
    handler(value: string | Stateful<string, Context>): ListenerSVGElementAttributes<Context>;
    observer(value: string | Stateful<string, Context>): ListenerSVGElementAttributes<Context>;
    phase(value: string | Stateful<string, Context>): ListenerSVGElementAttributes<Context>;
    propagate(value: string | Stateful<string, Context>): ListenerSVGElementAttributes<Context>;
    target(value: string | Stateful<string, Context>): ListenerSVGElementAttributes<Context>;
}

export interface MarkerSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    markerHeight(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    markerUnits(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    markerWidth(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    orient(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    preserveAspectRatio(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    refX(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    refY(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    viewBox(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): MarkerSVGElementAttributes<Context>;
}

export interface MaskSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    maskContentUnits(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    maskUnits(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): MaskSVGElementAttributes<Context>;
}

export interface MetadataSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    requiredExtensions(value: string | Stateful<string, Context>): MetadataSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): MetadataSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): MetadataSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): MetadataSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): MetadataSVGElementAttributes<Context>;
}

export interface MpathSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    externalResourcesRequired(value: string | Stateful<string, Context>): MpathSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): MpathSVGElementAttributes<Context>;
}

export interface PathSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    d(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    pathLength(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): PathSVGElementAttributes<Context>;
}

export interface PatternSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    patternContentUnits(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    patternTransform(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    patternUnits(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    preserveAspectRatio(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    viewBox(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): PatternSVGElementAttributes<Context>;
}

export interface PolygonSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    pathLength(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    points(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): PolygonSVGElementAttributes<Context>;
}

export interface PolylineSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    pathLength(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    points(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): PolylineSVGElementAttributes<Context>;
}

export interface PrefetchSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    bandwidth(value: string | Stateful<string, Context>): PrefetchSVGElementAttributes<Context>;
    mediaCharacterEncoding(value: string | Stateful<string, Context>): PrefetchSVGElementAttributes<Context>;
    mediaContentEncodings(value: string | Stateful<string, Context>): PrefetchSVGElementAttributes<Context>;
    mediaSize(value: string | Stateful<string, Context>): PrefetchSVGElementAttributes<Context>;
    mediaTime(value: string | Stateful<string, Context>): PrefetchSVGElementAttributes<Context>;
}

export interface RadialGradientSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    cx(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    cy(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fr(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fx(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    fy(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    gradientTransform(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    gradientUnits(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    r(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    spreadMethod(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): RadialGradientSVGElementAttributes<Context>;
}

export interface RectSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    pathLength(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    rx(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    ry(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): RectSVGElementAttributes<Context>;
}

export interface ScriptSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    crossorigin(value: string | Stateful<string, Context>): ScriptSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): ScriptSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): ScriptSVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): ScriptSVGElementAttributes<Context>;
}

export interface SetSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    attributeName(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    attributeType(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    begin(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    dur(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    end(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    max(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    min(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    repeatCount(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    repeatDur(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    restart(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
    to(value: string | Stateful<string, Context>): SetSVGElementAttributes<Context>;
}

export interface SolidColorSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
}

export interface StopSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    offset(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): StopSVGElementAttributes<Context>;
}

export interface StyleSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    media(value: string | Stateful<string, Context>): StyleSVGElementAttributes<Context>;
    title(value: string | Stateful<string, Context>): StyleSVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): StyleSVGElementAttributes<Context>;
}

export interface SvgElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    baseProfile(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    contentScriptType(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    contentStyleType(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    playbackOrder(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    playbackorder(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    preserveAspectRatio(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    snapshotTime(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    syncBehaviorDefault(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    syncToleranceDefault(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    timelineBegin(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    timelinebegin(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    version(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    viewBox(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
    zoomAndPan(value: string | Stateful<string, Context>): SvgElementAttributes<Context>;
}

export interface SwitchSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): SwitchSVGElementAttributes<Context>;
}

export interface SymbolSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    preserveAspectRatio(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    refX(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    refY(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    viewBox(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): SymbolSVGElementAttributes<Context>;
}

export interface TbreakSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    requiredExtensions(value: string | Stateful<string, Context>): TbreakSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): TbreakSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): TbreakSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): TbreakSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): TbreakSVGElementAttributes<Context>;
}

export interface TextSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    dx(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    dy(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    editable(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    lengthAdjust(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    rotate(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    textLength(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): TextSVGElementAttributes<Context>;
}

export interface TextAreaSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    editable(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): TextAreaSVGElementAttributes<Context>;
}

export interface TextPathSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    lengthAdjust(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    method(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    path(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    side(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    spacing(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    startOffset(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    textLength(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): TextPathSVGElementAttributes<Context>;
}

export interface TitleSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    requiredExtensions(value: string | Stateful<string, Context>): TitleSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): TitleSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): TitleSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): TitleSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): TitleSVGElementAttributes<Context>;
}

export interface TrefSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    dx(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    dy(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    lengthAdjust(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    rotate(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    textLength(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): TrefSVGElementAttributes<Context>;
}

export interface TspanSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    dx(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    dy(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    lengthAdjust(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    rotate(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    textLength(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): TspanSVGElementAttributes<Context>;
}

export interface UnknownSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    requiredExtensions(value: string | Stateful<string, Context>): UnknownSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): UnknownSVGElementAttributes<Context>;
}

export interface UseSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    alignmentBaseline(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    baselineShift(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    clip(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    clipPath(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    clipRule(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    color(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    colorInterpolation(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    colorInterpolationFilters(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    colorProfile(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    colorRendering(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    cursor(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    direction(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    display(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    dominantBaseline(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    enableBackground(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    fillOpacity(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    fillRule(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    filter(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    floodColor(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    floodOpacity(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    fontFamily(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    fontSize(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    fontSizeAdjust(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    fontStretch(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    fontStyle(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    fontVariant(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    fontWeight(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    glyphOrientationHorizontal(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    glyphOrientationVertical(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    href(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    imageRendering(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    kerning(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    letterSpacing(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    lightingColor(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    markerEnd(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    markerMid(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    markerStart(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    mask(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    opacity(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    overflow(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    pointerEvents(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    shapeRendering(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    stopColor(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    stopOpacity(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    stroke(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    strokeDasharray(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    strokeDashoffset(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    strokeLinecap(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    strokeLinejoin(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    strokeMiterlimit(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    strokeOpacity(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    strokeWidth(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    textAnchor(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    textDecoration(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    textRendering(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    unicodeBidi(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    visibility(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    wordSpacing(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    writingMode(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): UseSVGElementAttributes<Context>;
}

export interface VideoSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    begin(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    dur(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    end(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    externalResourcesRequired(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    fill(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    focusHighlight(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    focusable(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    height(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    initialVisibility(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    max(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    min(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    navDown(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    navDownLeft(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    navDownRight(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    navLeft(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    navNext(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    navPrev(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    navRight(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    navUp(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    navUpLeft(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    navUpRight(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    overlay(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    preserveAspectRatio(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    repeatCount(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    repeatDur(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    requiredExtensions(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    requiredFeatures(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    requiredFonts(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    requiredFormats(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    restart(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    syncBehavior(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    syncMaster(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    syncTolerance(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    systemLanguage(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    transform(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    transformBehavior(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    type(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    width(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    x(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
    y(value: string | Stateful<string, Context>): VideoSVGElementAttributes<Context>;
}

export interface ViewSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    externalResourcesRequired(value: string | Stateful<string, Context>): ViewSVGElementAttributes<Context>;
    preserveAspectRatio(value: string | Stateful<string, Context>): ViewSVGElementAttributes<Context>;
    viewBox(value: string | Stateful<string, Context>): ViewSVGElementAttributes<Context>;
    viewTarget(value: string | Stateful<string, Context>): ViewSVGElementAttributes<Context>;
    zoomAndPan(value: string | Stateful<string, Context>): ViewSVGElementAttributes<Context>;
}

export interface VkernSVGElementAttributes<Context> extends SpecialAttributes<Context>, GlobalSVGAttributes<Context> {
    g1(value: string | Stateful<string, Context>): VkernSVGElementAttributes<Context>;
    g2(value: string | Stateful<string, Context>): VkernSVGElementAttributes<Context>;
    k(value: string | Stateful<string, Context>): VkernSVGElementAttributes<Context>;
    u1(value: string | Stateful<string, Context>): VkernSVGElementAttributes<Context>;
    u2(value: string | Stateful<string, Context>): VkernSVGElementAttributes<Context>;
}

export const svgAttributeNames: Map<string, string> = new Map();
svgAttributeNames.set("alignmentBaseline", "alignment-baseline")
svgAttributeNames.set("baselineShift", "baseline-shift")
svgAttributeNames.set("clipPath", "clip-path")
svgAttributeNames.set("clipRule", "clip-rule")
svgAttributeNames.set("colorInterpolation", "color-interpolation")
svgAttributeNames.set("colorInterpolationFilters", "color-interpolation-filters")
svgAttributeNames.set("colorProfile", "color-profile")
svgAttributeNames.set("colorRendering", "color-rendering")
svgAttributeNames.set("dominantBaseline", "dominant-baseline")
svgAttributeNames.set("enableBackground", "enable-background")
svgAttributeNames.set("fillOpacity", "fill-opacity")
svgAttributeNames.set("fillRule", "fill-rule")
svgAttributeNames.set("floodColor", "flood-color")
svgAttributeNames.set("floodOpacity", "flood-opacity")
svgAttributeNames.set("fontFamily", "font-family")
svgAttributeNames.set("fontSize", "font-size")
svgAttributeNames.set("fontSizeAdjust", "font-size-adjust")
svgAttributeNames.set("fontStretch", "font-stretch")
svgAttributeNames.set("fontStyle", "font-style")
svgAttributeNames.set("fontVariant", "font-variant")
svgAttributeNames.set("fontWeight", "font-weight")
svgAttributeNames.set("glyphOrientationHorizontal", "glyph-orientation-horizontal")
svgAttributeNames.set("glyphOrientationVertical", "glyph-orientation-vertical")
svgAttributeNames.set("imageRendering", "image-rendering")
svgAttributeNames.set("letterSpacing", "letter-spacing")
svgAttributeNames.set("lightingColor", "lighting-color")
svgAttributeNames.set("markerEnd", "marker-end")
svgAttributeNames.set("markerMid", "marker-mid")
svgAttributeNames.set("markerStart", "marker-start")
svgAttributeNames.set("navDown", "nav-down")
svgAttributeNames.set("navDownLeft", "nav-down-left")
svgAttributeNames.set("navDownRight", "nav-down-right")
svgAttributeNames.set("navLeft", "nav-left")
svgAttributeNames.set("navNext", "nav-next")
svgAttributeNames.set("navPrev", "nav-prev")
svgAttributeNames.set("navRight", "nav-right")
svgAttributeNames.set("navUp", "nav-up")
svgAttributeNames.set("navUpLeft", "nav-up-left")
svgAttributeNames.set("navUpRight", "nav-up-right")
svgAttributeNames.set("pointerEvents", "pointer-events")
svgAttributeNames.set("shapeRendering", "shape-rendering")
svgAttributeNames.set("stopColor", "stop-color")
svgAttributeNames.set("stopOpacity", "stop-opacity")
svgAttributeNames.set("strokeDasharray", "stroke-dasharray")
svgAttributeNames.set("strokeDashoffset", "stroke-dashoffset")
svgAttributeNames.set("strokeLinecap", "stroke-linecap")
svgAttributeNames.set("strokeLinejoin", "stroke-linejoin")
svgAttributeNames.set("strokeMiterlimit", "stroke-miterlimit")
svgAttributeNames.set("strokeOpacity", "stroke-opacity")
svgAttributeNames.set("strokeWidth", "stroke-width")
svgAttributeNames.set("textAnchor", "text-anchor")
svgAttributeNames.set("textDecoration", "text-decoration")
svgAttributeNames.set("textRendering", "text-rendering")
svgAttributeNames.set("unicodeBidi", "unicode-bidi")
svgAttributeNames.set("wordSpacing", "word-spacing")
svgAttributeNames.set("writingMode", "writing-mode")
svgAttributeNames.set("renderingIntent", "rendering-intent")
svgAttributeNames.set("horizAdvX", "horiz-adv-x")
svgAttributeNames.set("horizOriginX", "horiz-origin-x")
svgAttributeNames.set("horizOriginY", "horiz-origin-y")
svgAttributeNames.set("vertAdvY", "vert-adv-y")
svgAttributeNames.set("vertOriginX", "vert-origin-x")
svgAttributeNames.set("vertOriginY", "vert-origin-y")
svgAttributeNames.set("accentHeight", "accent-height")
svgAttributeNames.set("capHeight", "cap-height")
svgAttributeNames.set("overlinePosition", "overline-position")
svgAttributeNames.set("overlineThickness", "overline-thickness")
svgAttributeNames.set("panose1", "panose-1")
svgAttributeNames.set("strikethroughPosition", "strikethrough-position")
svgAttributeNames.set("strikethroughThickness", "strikethrough-thickness")
svgAttributeNames.set("underlinePosition", "underline-position")
svgAttributeNames.set("underlineThickness", "underline-thickness")
svgAttributeNames.set("unicodeRange", "unicode-range")
svgAttributeNames.set("unitsPerEm", "units-per-em")
svgAttributeNames.set("vAlphabetic", "v-alphabetic")
svgAttributeNames.set("vHanging", "v-hanging")
svgAttributeNames.set("vIdeographic", "v-ideographic")
svgAttributeNames.set("vMathematical", "v-mathematical")
svgAttributeNames.set("xHeight", "x-height")
svgAttributeNames.set("arabicForm", "arabic-form")
svgAttributeNames.set("glyphName", "glyph-name")
